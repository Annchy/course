{
	"info": {
		"_postman_id": "bdc9bf64-32fc-4703-a2ed-74a1e8598a57",
		"name": "HW_postman-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.text();\r",
							"\r",
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"}); \r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string:\r",
							"pm.test(\"find string\", function() {\r",
							"    pm.expect(respData).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"}); \r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками):\r",
							"var req_name = request.data.name;\r",
							"\r",
							"pm.test(\"Test: name = Ann\", function(){\r",
							"    pm.expect(req_name).to.eql(\"Ann\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками):\r",
							"var req_age = +request.data.age;\r",
							"\r",
							"pm.test(\"Test: age = 23\", function(){\r",
							"    pm.expect(req_age).to.eql(23);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками):\r",
							"var req_salary = +request.data.salary;\r",
							"\r",
							"pm.test(\"Test: salary = 1000\", function(){\r",
							"    pm.expect(req_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request:\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"var resp_name = respData.name;\r",
							"\r",
							"pm.test(\"Test: name (resp=req)\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request):\r",
							"var resp_age = +respData.age;\r",
							"\r",
							"pm.test(\"Test: age (resp=req)\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request):\r",
							"var resp_salary = respData.salary;\r",
							"\r",
							"pm.test(\"Test: salary (resp=req)\", function(){\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response:\r",
							"var resp_family = respData.family;\r",
							"\r",
							"console.log(\"=== family = \", resp_family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary * 4 (salary забрать из request):\r",
							"var resp_u_salary_1_5_year = respData.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Test: u_salary_1_5_year = salary * 4\", function(){\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ann",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"}); \r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request:\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"var resp_name = respData.name;\r",
							"var req_name = reqData.name;\r",
							"\r",
							"pm.test(\"Test: name (resp=req)\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request):\r",
							"var resp_age = respData.age;\r",
							"var req_age = reqData.age;\r",
							"\r",
							"pm.test(\"Test: age (resp=req)\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request):\r",
							"var resp_salary = respData.salary;\r",
							"var req_salary = +reqData.salary;\r",
							"\r",
							"pm.test(\"Test: salary (resp=req)\", function(){\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response:\r",
							"var resp_family = respData.family;\r",
							"console.log (\"=== family = \", resp_family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name:\r",
							"var resp_dog = respData.family.pets.dog;\r",
							"\r",
							"pm.test(\"Test: dog has parameter 'name'\", function() {\r",
							"    pm.expect(resp_dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age:\r",
							"pm.test(\"Test: dog has parameter 'age'\", function() {\r",
							"    pm.expect(resp_dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky:\r",
							"var resp_dog_name = respData.family.pets.dog.name;\r",
							"\r",
							"pm.test(\"Test: dog_name = Luky\", function() {\r",
							"    pm.expect(resp_dog_name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4:\r",
							"var resp_dog_age = respData.family.pets.dog.age;\r",
							"\r",
							"pm.test(\"Test: dog_age = 4\", function() {\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ann&salary=1000&age=23",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ann"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "age",
							"value": "23"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"}); \r",
							"\r",
							"// 3. Спарсить response body в json:\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request:\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"//var reqData = JSON.parse(responseBody);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request):\r",
							"var resp_name = respData.name;\r",
							"var req_name = reqData.name;\r",
							"\r",
							"pm.test(\"Test: name (resp=req)\", function(){\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request):\r",
							"var resp_age = respData.age;\r",
							"var req_age = +reqData.age;\r",
							"\r",
							"pm.test(\"Test: age (resp=req)\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request:\r",
							"var req_salary = +reqData.salary;\r",
							"console.log(\"=== req_salary = \" + req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response:\r",
							"var resp_salary = respData.salary;\r",
							"console.log(\"=== resp_salary = \", resp_salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response:\r",
							"var resp_salary_0 = respData.salary[0];\r",
							"console.log(\"=== resp_salary_0 = \" + resp_salary_0);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response:\r",
							"var resp_salary_1 = +respData.salary[1];\r",
							"console.log(\"=== resp_salary_1 = \" + resp_salary_1);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response:\r",
							"var resp_salary_2 = +respData.salary[2];\r",
							"console.log(\"=== resp_salary_2 = \" + resp_salary_2);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request):\r",
							"pm.test(\"Test: salary[0] = salary (resp=req)\", function(){\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary * 2 из request (salary забрать из request):\r",
							"pm.test(\"Test: salary[1] = salary * 2\", function(){\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary * 3 из request (salary забрать из request):\r",
							"pm.test(\"Test: salary[2] = salary * 3\", function(){\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name:\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age:\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary:\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name:\r",
							"pm.environment.set(\"name\", req_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age:\r",
							"pm.environment.set(\"age\", req_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary:\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
							"for (var i = 0; i < resp_salary.length; i++) {\r",
							"console.log(\"=== Element '\" + i + \"' = \" + resp_salary[i]);\r",
							"};\r",
							"\r",
							"// for (let i of resp_salary){\r",
							"//  console.log(\"===> Salary \" + i); \r",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ann&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ann"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request:\r",
							"//в Body (form-data) salary = {{salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age:\r",
							"//в Body (form-data) age = {{age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name:\r",
							"//в Body (form-data) namr = {{name}}\r",
							"\r",
							"// 4. Отправить запрос:\r",
							"//\"Send\"\r",
							"\r",
							"// 5. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"}); \r",
							"\r",
							"// 6. Спарсить response body в json:\r",
							"var respData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request:\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary:\r",
							"pm.test(\"Test: response has 'start_qa_salary'\", function () { \r",
							"    pm.expect(respData).to.have.property('start_qa_salary'); \r",
							"}); \r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
							"pm.test(\"Test: response has 'qa_salary_after_6_months'\", function () { \r",
							"    pm.expect(respData).to.have.property('qa_salary_after_6_months'); \r",
							"}); \r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
							"pm.test(\"Test: response has 'qa_salary_after_12_months'\", function () { \r",
							"    pm.expect(respData).to.have.property('qa_salary_after_12_months'); \r",
							"}); \r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
							"pm.test(\"Test: response has 'qa_salary_after_1.5_year'\", function () { \r",
							"    pm.expect(respData).to.have.property('qa_salary_after_1.5_year'); \r",
							"}); \r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
							"pm.test(\"Test: response has 'qa_salary_after_3.5_years'\", function () { \r",
							"    pm.expect(respData).to.have.property('qa_salary_after_3.5_years'); \r",
							"}); \r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person:\r",
							"pm.test(\"Test: response has 'person'\", function () { \r",
							"    pm.expect(respData).to.have.property('person'); \r",
							"}); \r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request):\r",
							"var resp_start_qa_salary = respData.start_qa_salary;\r",
							"var req_salary = +reqData.salary;\r",
							"\r",
							"pm.test(\"Test: start_qa_salary = salary (resp=req)\", function(){\r",
							"    pm.expect(resp_start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary * 2 из request (salary забрать из request):\r",
							"var resp_qa_salary_after_6_months = respData.qa_salary_after_6_months;\r",
							"\r",
							"pm.test(\"Test: qa_salary_after_6_months = salary * 2\", function(){\r",
							"    pm.expect(resp_qa_salary_after_6_months).to.eql(req_salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary * 2.7 из request (salary забрать из request):\r",
							"var resp_qa_salary_after_12_months = respData.qa_salary_after_12_months;\r",
							"\r",
							"pm.test(\"Test: qa_salary_after_12_months = salary * 2.7\", function(){\r",
							"    pm.expect(resp_qa_salary_after_12_months).to.eql(req_salary * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary * 3.3 из request (salary забрать из request):\r",
							"var resp_qa_salary_after_1_5_year = respData[\"qa_salary_after_1.5_year\"];\r",
							"\r",
							"pm.test(\"Test: qa_salary_after_1_5_year = salary * 3.3\", function(){\r",
							"    pm.expect(resp_qa_salary_after_1_5_year).to.eql(req_salary * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary * 3.8 из request (salary забрать из request):\r",
							"var resp_qa_salary_after_3_5_year = respData[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"pm.test(\"Test: qa_salary_after_3_5_year = salary * 3.3\", function(){\r",
							"    pm.expect(resp_qa_salary_after_3_5_year).to.eql(req_salary * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request):\r",
							"var resp_salary = respData.person.u_name[1];\r",
							"\r",
							"pm.test(\"Test: salary (resp=req)\", function(){\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request):\r",
							"var resp_age = respData.person.u_age;\r",
							"var req_age = +reqData.age;\r",
							"\r",
							"pm.test(\"Test: age (resp=req)\", function(){\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary * 4.2 из request (salary забрать из request):\r",
							"var resp_u_salary_5_years = respData.person.u_salary_5_years;\r",
							"\r",
							"pm.test(\"Test: u_salary_5_years = salary * 4.2\", function(){\r",
							"    pm.expect(resp_u_salary_5_years).to.eql(req_salary * 4.2);\r",
							"});\r",
							"\r",
							"// 22. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра person:\r",
							"var resp_person = respData.person;\r",
							"var resp_u_name = respData.person.u_name;\r",
							"\r",
							"_.each(resp_person, function (val, ind) {\r",
							"    if (val == resp_u_name) {\r",
							"        for (var i = 0; i < resp_u_name.length; i++) {\r",
							"        console.log(\"=== u_name [\" + i + \"] = \" + resp_u_name[i]);\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        console.log (\"===> Element '\" + ind + \"': \", val)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}